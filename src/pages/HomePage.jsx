import React from 'react';
import Categories from "../components/Categories";
import Sort from "../components/Sort";
import Skeleton from "../components/PizzaBlock/Skeleton";
import PizzaBlock from "../components/PizzaBlock/PizzaBlock";
import {SearchContext} from "../App";
import {useSelector, useDispatch} from "react-redux";
import {setFilters} from "../redux/slices/filterSlice"
import {fetchPizzas} from "../redux/slices/pizzaSlice";
import {useNavigate} from 'react-router-dom'
import qs from 'qs'


function HomePage() {
    const navigate = useNavigate()
    const dispatch = useDispatch()
    const isMounted = React.useRef(false)
    const isSearch = React.useRef(false)
    const {items, status} = useSelector(state => state.pizza)
    const {activeCategory, activeSort, sortList} = useSelector(state => state.filter)
    const {searchValue} = React.useContext(SearchContext)

    const getPizzas = async () => {

        const sortBy = activeSort.sortProperty.replace('-', '')
        const order = activeSort.sortProperty.includes('-') ? 'desc' : 'ask'
        const category = activeCategory > 0 ? `category=${activeCategory}` : ''
        const search = searchValue ? `&search=${searchValue}` : '' //–ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å mockApi, –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –±—ç–∫–µ –±—É–¥–µ—Ç –Ω–æ—Ä–º.

        dispatch(fetchPizzas({
            sortBy,
            order,
            category,
            search
        }))
        window.scrollTo(0, 0)
    }

    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º url-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
    React.useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1))
            const sort = sortList.find((obj) => obj.sortProperty === params.sortProperty)
            dispatch(
                setFilters({
                    ...params,
                    sort,
                })
            )
            isSearch.current = true
        }
    }, [])

    // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    React.useEffect(() => {
        window.scrollTo(0, 0)
        if (!isSearch.current) {
            getPizzas()
        }
        isSearch.current = false
    }, [activeCategory, activeSort.sortProperty, searchValue])

    // –ï—Å–ª–∏ –±—ã–ª —É–∂–µ —Ä–∞–Ω–µ–µ —Ä–µ–Ω–¥–µ—Ä, —Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –Ω—É–∂–Ω–æ –ª–∏ –≤—à–∏–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    React.useEffect(() => {
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: activeSort.sortProperty,
                activeCategory
            })
            navigate(`?${queryString}`)
        }
        isMounted.current = true
    }, [activeCategory, activeSort.sortProperty])


    const pizzas = items.map((obj) => <PizzaBlock key={obj.id} {...obj} />)
    const skeletons = [...new Array(6)].map((_, i) => <Skeleton key={i}/>)

    return (
        <>
            <div className="content__top">
                <Categories/>
                <Sort/>
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {
                status === 'error' ? (
                    <div>
                        <h2>–ü–∏—Ü—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç <icon>üòï</icon></h2>
                        <p>
                            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ü—Ü —Å —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.
                        </p>
                    </div>
                ) : (
                    <div className="content__items">
                        {status === 'loading' ? skeletons : pizzas}
                    </div>
                )
            }
        </>
    )
}

export default HomePage